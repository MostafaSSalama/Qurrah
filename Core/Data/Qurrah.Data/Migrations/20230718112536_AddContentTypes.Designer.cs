// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Qurrah.Data;

#nullable disable

namespace Qurrah.Data.Migrations
{
    [DbContext(typeof(QurrahDbContext))]
    [Migration("20230718112536_AddContentTypes")]
    partial class AddContentTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1f18dd05-4270-4150-81cb-00b355bf0881",
                            Name = "Parent",
                            NormalizedName = "Parent"
                        },
                        new
                        {
                            Id = "1eabda33-4045-48d1-82e5-c18f54b9bdc4",
                            Name = "Center",
                            NormalizedName = "Center"
                        },
                        new
                        {
                            Id = "4bf454c1-03e0-4e5e-a4b0-e06ce32e2445",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = "f7032409-a2ed-4c29-8fa9-c25dc0560275",
                            Name = "CenterApprover",
                            NormalizedName = "CenterApprover"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c5bceb8a-df1a-4f2e-a460-08d84415ec0c",
                            RoleId = "4bf454c1-03e0-4e5e-a4b0-e06ce32e2445"
                        },
                        new
                        {
                            UserId = "424d29d3-706b-4f36-80fe-21ad3b1932ac",
                            RoleId = "f7032409-a2ed-4c29-8fa9-c25dc0560275"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Qurrah.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FKCreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FKUserTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FKCreatedByUserId");

                    b.HasIndex("FKUserTypeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c5bceb8a-df1a-4f2e-a460-08d84415ec0c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15de08ea-439c-4cea-83c5-3e8952bfa87a",
                            CreatedOn = new DateTime(2023, 7, 18, 14, 25, 36, 354, DateTimeKind.Local).AddTicks(6745),
                            Email = "Admin@Qurrah.com",
                            EmailConfirmed = false,
                            FKUserTypeId = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "Admin@Qurrah.com",
                            NormalizedUserName = "Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAENri6psikN9pFktkiMLWItA2wmcfEHdJhuTEzRA/Y205ho5Thdb2SpZnK0iDDpu9Sw==",
                            PhoneNumber = "0543700744",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92eef05a-d2dd-4831-8d8b-b9716313da86",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "424d29d3-706b-4f36-80fe-21ad3b1932ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a69d2e60-b91f-4f14-9bdd-ccf1e573d79e",
                            CreatedOn = new DateTime(2023, 7, 18, 14, 25, 36, 478, DateTimeKind.Local).AddTicks(7595),
                            Email = "CenterReviewer@Qurrah.com",
                            EmailConfirmed = false,
                            FKUserTypeId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "CenterReviewer@Qurrah.com",
                            NormalizedUserName = "CenterReviewer",
                            PasswordHash = "AQAAAAIAAYagAAAAEKxDrjTpus0G+A6dyF7PvtGIugkOvP4OMjVi85MhoXSbXvoSkhWCK6zouoaLJaFHEg==",
                            PhoneNumber = "0543700745",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdfc08e2-d42d-46e7-b174-b1500c38683e",
                            TwoFactorEnabled = false,
                            UserName = "CenterReviewer"
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Center");
                });

            modelBuilder.Entity("Qurrah.Entities.CenterLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FKFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FKStatusId")
                        .HasColumnType("int");

                    b.Property<string>("FKStatusUpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FKFileId");

                    b.HasIndex("FKStatusId");

                    b.HasIndex("FKStatusUpdatedByUserId");

                    b.ToTable("CenterLicense");
                });

            modelBuilder.Entity("Qurrah.Entities.CenterLicenseStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CenterLicenseStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "UnderConsideration"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.CenterLicenseStatusDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FKLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("FKStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FKStatusId");

                    b.HasIndex("FKLanguageId", "FKStatusId")
                        .IsUnique();

                    b.ToTable("CenterLicenseStatusDescription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Under Consideration",
                            FKLanguageId = 2,
                            FKStatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "قيد الدراسة",
                            FKLanguageId = 1,
                            FKStatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Approved",
                            FKLanguageId = 2,
                            FKStatusId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "مقبول",
                            FKLanguageId = 1,
                            FKStatusId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Rejected",
                            FKLanguageId = 2,
                            FKStatusId = 3
                        },
                        new
                        {
                            Id = 6,
                            Description = "مرفوض",
                            FKLanguageId = 1,
                            FKStatusId = 3
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.CenterOwnerUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("FKCenterId")
                        .HasColumnType("int");

                    b.Property<int>("FKGenderId")
                        .HasColumnType("int");

                    b.Property<string>("FKUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FKCenterId");

                    b.HasIndex("FKGenderId");

                    b.HasIndex("FKUserId")
                        .IsUnique();

                    b.ToTable("CenterOwnerUser");
                });

            modelBuilder.Entity("Qurrah.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("FKTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("FKTypeId");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("Qurrah.Entities.FAQType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("FAQType");
                });

            modelBuilder.Entity("Qurrah.Entities.FileDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FKFileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FKFileTypeId");

                    b.ToTable("FileDetails");
                });

            modelBuilder.Entity("Qurrah.Entities.FileType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FileType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentType = "application/pdf",
                            Name = "PDF"
                        },
                        new
                        {
                            Id = 2,
                            ContentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                            Name = "DOCX"
                        },
                        new
                        {
                            Id = 3,
                            ContentType = "application/msword",
                            Name = "DOC"
                        },
                        new
                        {
                            Id = 4,
                            ContentType = "image/x-png",
                            Name = "PNG"
                        },
                        new
                        {
                            Id = 5,
                            ContentType = "image/jpeg",
                            Name = "JPG"
                        },
                        new
                        {
                            Id = 6,
                            ContentType = "image/jpeg",
                            Name = "JPEG"
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.GenderDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FKGenderId")
                        .HasColumnType("int");

                    b.Property<int>("FKLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FKGenderId");

                    b.HasIndex("FKLanguageId", "FKGenderId")
                        .IsUnique();

                    b.ToTable("GenderDescription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "ذكر",
                            FKGenderId = 1,
                            FKLanguageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Male",
                            FKGenderId = 1,
                            FKLanguageId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "أنثى",
                            FKGenderId = 2,
                            FKLanguageId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Female",
                            FKGenderId = 2,
                            FKLanguageId = 2
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("RTL")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCulture")
                        .IsUnique();

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            LanguageCulture = "ar-SA",
                            Name = "Arabic",
                            Published = true,
                            RTL = true
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            LanguageCulture = "en-US",
                            Name = "English",
                            Published = true,
                            RTL = false
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.LanguageDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FKInLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("FKLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FKInLanguageId");

                    b.HasIndex("FKLanguageId", "FKInLanguageId")
                        .IsUnique();

                    b.ToTable("LanguageDescription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "العربية",
                            FKInLanguageId = 1,
                            FKLanguageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Arabic",
                            FKInLanguageId = 2,
                            FKLanguageId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "الإنجليزية",
                            FKInLanguageId = 1,
                            FKLanguageId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "English",
                            FKInLanguageId = 2,
                            FKLanguageId = 2
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.LocalizedProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("FKLanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMultiLine")
                        .HasColumnType("bit");

                    b.Property<string>("LocaleKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LocaleKeyGroup")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LocaleValue")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FKLanguageId");

                    b.HasIndex("LocaleKeyGroup");

                    b.HasIndex("LocaleKeyGroup", "LocaleKey", "FKLanguageId", "EntityId")
                        .IsUnique();

                    b.ToTable("LocalizedProperty");
                });

            modelBuilder.Entity("Qurrah.Entities.ParentUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("FKGenderId")
                        .HasColumnType("int");

                    b.Property<string>("FKUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FKGenderId");

                    b.HasIndex("FKUserId")
                        .IsUnique();

                    b.ToTable("ParentUser");
                });

            modelBuilder.Entity("Qurrah.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CenterApprover"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Parent"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Center"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Qurrah.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Qurrah.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Qurrah.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Qurrah.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Qurrah.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("FKCreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Qurrah.Entities.UserType", "UserType")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("FKUserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Qurrah.Entities.CenterLicense", b =>
                {
                    b.HasOne("Qurrah.Entities.FileDetails", "FileDetails")
                        .WithMany("CenterLicenses")
                        .HasForeignKey("FKFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.CenterLicenseStatus", "Status")
                        .WithMany()
                        .HasForeignKey("FKStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.ApplicationUser", "StatusUpdatedByUser")
                        .WithMany("CenterLicenses")
                        .HasForeignKey("FKStatusUpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FileDetails");

                    b.Navigation("Status");

                    b.Navigation("StatusUpdatedByUser");
                });

            modelBuilder.Entity("Qurrah.Entities.CenterLicenseStatusDescription", b =>
                {
                    b.HasOne("Qurrah.Entities.Language", "Language")
                        .WithMany("CenterLicenseStatusDescriptions")
                        .HasForeignKey("FKLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.CenterLicenseStatus", "CenterLicenseStatus")
                        .WithMany("CenterLicenseStatusDescriptions")
                        .HasForeignKey("FKStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CenterLicenseStatus");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Qurrah.Entities.CenterOwnerUser", b =>
                {
                    b.HasOne("Qurrah.Entities.Center", "Center")
                        .WithMany()
                        .HasForeignKey("FKCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.Gender", "Gender")
                        .WithMany("CenterOwnerUsers")
                        .HasForeignKey("FKGenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("FKUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Center");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Qurrah.Entities.FAQ", b =>
                {
                    b.HasOne("Qurrah.Entities.FAQType", "FAQType")
                        .WithMany("FAQs")
                        .HasForeignKey("FKTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FAQType");
                });

            modelBuilder.Entity("Qurrah.Entities.FileDetails", b =>
                {
                    b.HasOne("Qurrah.Entities.FileType", "FileType")
                        .WithMany("FileDetails")
                        .HasForeignKey("FKFileTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("Qurrah.Entities.GenderDescription", b =>
                {
                    b.HasOne("Qurrah.Entities.Gender", "Gender")
                        .WithMany("GenderDescriptions")
                        .HasForeignKey("FKGenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.Language", "Language")
                        .WithMany("GenderDescriptions")
                        .HasForeignKey("FKLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Qurrah.Entities.LanguageDescription", b =>
                {
                    b.HasOne("Qurrah.Entities.Language", "InLanguage")
                        .WithMany("InLanguageDescriptions")
                        .HasForeignKey("FKInLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.Language", "Language")
                        .WithMany("LanguageDescriptions")
                        .HasForeignKey("FKLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InLanguage");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Qurrah.Entities.LocalizedProperty", b =>
                {
                    b.HasOne("Qurrah.Entities.Language", "Language")
                        .WithMany("LocalizedProperties")
                        .HasForeignKey("FKLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Qurrah.Entities.ParentUser", b =>
                {
                    b.HasOne("Qurrah.Entities.Gender", "Gender")
                        .WithMany("ParentUsers")
                        .HasForeignKey("FKGenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("FKUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Qurrah.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CenterLicenses");
                });

            modelBuilder.Entity("Qurrah.Entities.CenterLicenseStatus", b =>
                {
                    b.Navigation("CenterLicenseStatusDescriptions");
                });

            modelBuilder.Entity("Qurrah.Entities.FAQType", b =>
                {
                    b.Navigation("FAQs");
                });

            modelBuilder.Entity("Qurrah.Entities.FileDetails", b =>
                {
                    b.Navigation("CenterLicenses");
                });

            modelBuilder.Entity("Qurrah.Entities.FileType", b =>
                {
                    b.Navigation("FileDetails");
                });

            modelBuilder.Entity("Qurrah.Entities.Gender", b =>
                {
                    b.Navigation("CenterOwnerUsers");

                    b.Navigation("GenderDescriptions");

                    b.Navigation("ParentUsers");
                });

            modelBuilder.Entity("Qurrah.Entities.Language", b =>
                {
                    b.Navigation("CenterLicenseStatusDescriptions");

                    b.Navigation("GenderDescriptions");

                    b.Navigation("InLanguageDescriptions");

                    b.Navigation("LanguageDescriptions");

                    b.Navigation("LocalizedProperties");
                });

            modelBuilder.Entity("Qurrah.Entities.UserType", b =>
                {
                    b.Navigation("ApplicationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
