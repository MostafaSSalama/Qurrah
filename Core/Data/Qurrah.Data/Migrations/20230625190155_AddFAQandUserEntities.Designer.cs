// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Qurrah.Data;

#nullable disable

namespace Qurrah.Data.Migrations
{
    [DbContext(typeof(QurrahDbContext))]
    [Migration("20230625190155_AddFAQandUserEntities")]
    partial class AddFAQandUserEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a4196a4c-6713-4214-b3a2-0ef0159ba7e3",
                            Name = "Parent",
                            NormalizedName = "Parent"
                        },
                        new
                        {
                            Id = "71773683-0f94-4e25-9d97-ffe70827fbb6",
                            Name = "Center",
                            NormalizedName = "Center"
                        },
                        new
                        {
                            Id = "1c1fad40-cd3b-426f-b4c0-6205236df447",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = "abd66b75-dd65-4809-8db5-874c0f8ce275",
                            Name = "CenterApprover",
                            NormalizedName = "CenterApprover"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ad856c8c-eebb-4984-b0ec-5ce7f3efa22c",
                            RoleId = "1c1fad40-cd3b-426f-b4c0-6205236df447"
                        },
                        new
                        {
                            UserId = "b6578ba7-8b09-41c1-83b5-331186006e14",
                            RoleId = "abd66b75-dd65-4809-8db5-874c0f8ce275"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Qurrah.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FKCreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FKUserTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FKCreatedByUserId");

                    b.HasIndex("FKUserTypeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad856c8c-eebb-4984-b0ec-5ce7f3efa22c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e643d9a2-d478-4e5c-8ccf-f9bf32142061",
                            CreatedOn = new DateTime(2023, 6, 25, 22, 1, 55, 342, DateTimeKind.Local).AddTicks(7471),
                            Email = "Admin@Qurrah.com",
                            EmailConfirmed = false,
                            FKUserTypeId = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "Admin@Qurrah.com",
                            NormalizedUserName = "Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEJTE5PrIrSrBthlhc7n16og3Xnir72Sc+ZRYWHO50eRqXjQOt2nbGZK+KpRey196KA==",
                            PhoneNumber = "0543700744",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2a4accb-0aa3-4cde-af0e-fcc63ca75a45",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "b6578ba7-8b09-41c1-83b5-331186006e14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a869b20-05ee-4d0b-a25f-b2caf6391cea",
                            CreatedOn = new DateTime(2023, 6, 25, 22, 1, 55, 474, DateTimeKind.Local).AddTicks(4718),
                            Email = "CenterReviewer@Qurrah.com",
                            EmailConfirmed = false,
                            FKUserTypeId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "CenterReviewer@Qurrah.com",
                            NormalizedUserName = "CenterReviewer",
                            PasswordHash = "AQAAAAIAAYagAAAAEOrEm4/zLg7B487c0Wx+WZQH1SK+JiEmA9HgPsg9Z+PuE99fu+OuvMZDs8pv3of0Dw==",
                            PhoneNumber = "0543700745",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "544dead9-996c-481a-a720-e1b46bd93844",
                            TwoFactorEnabled = false,
                            UserName = "CenterReviewer"
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Center");
                });

            modelBuilder.Entity("Qurrah.Entities.CenterOwnerUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("FKCenterId")
                        .HasColumnType("int");

                    b.Property<int>("FKGenderId")
                        .HasColumnType("int");

                    b.Property<string>("FKUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FKCenterId");

                    b.HasIndex("FKGenderId");

                    b.HasIndex("FKUserId")
                        .IsUnique();

                    b.ToTable("CenterOwnerUser");
                });

            modelBuilder.Entity("Qurrah.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("FKTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("FKTypeId");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("Qurrah.Entities.FAQType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("FAQType");
                });

            modelBuilder.Entity("Qurrah.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.GenderDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FKGenderId")
                        .HasColumnType("int");

                    b.Property<int>("FKLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FKGenderId");

                    b.HasIndex("FKLanguageId", "FKGenderId")
                        .IsUnique();

                    b.ToTable("GenderDescription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "ذكر",
                            FKGenderId = 1,
                            FKLanguageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Male",
                            FKGenderId = 1,
                            FKLanguageId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "أنثى",
                            FKGenderId = 2,
                            FKLanguageId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Female",
                            FKGenderId = 2,
                            FKLanguageId = 2
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("RTL")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            LanguageCulture = "ar-SA",
                            Name = "Arabic",
                            Published = true,
                            RTL = true
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            LanguageCulture = "en-US",
                            Name = "English",
                            Published = true,
                            RTL = false
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.LanguageDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FKInLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("FKLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FKInLanguageId");

                    b.HasIndex("FKLanguageId", "FKInLanguageId")
                        .IsUnique();

                    b.ToTable("LanguageDescription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "العربية",
                            FKInLanguageId = 1,
                            FKLanguageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Arabic",
                            FKInLanguageId = 2,
                            FKLanguageId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "الإنجليزية",
                            FKInLanguageId = 1,
                            FKLanguageId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "English",
                            FKInLanguageId = 2,
                            FKLanguageId = 2
                        });
                });

            modelBuilder.Entity("Qurrah.Entities.LocalizedProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("FKLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LocaleKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LocaleKeyGroup")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LocaleValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FKLanguageId");

                    b.HasIndex("LocaleKeyGroup");

                    b.HasIndex("LocaleKeyGroup", "LocaleKey", "LocaleValue", "FKLanguageId", "EntityId")
                        .IsUnique();

                    b.ToTable("LocalizedProperty");
                });

            modelBuilder.Entity("Qurrah.Entities.ParentUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("FKGenderId")
                        .HasColumnType("int");

                    b.Property<string>("FKUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FKGenderId");

                    b.HasIndex("FKUserId")
                        .IsUnique();

                    b.ToTable("ParentUser");
                });

            modelBuilder.Entity("Qurrah.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CenterApprover"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Parent"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Center"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Qurrah.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Qurrah.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Qurrah.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Qurrah.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Qurrah.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("FKCreatedByUserId");

                    b.HasOne("Qurrah.Entities.UserType", "UserType")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("FKUserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Qurrah.Entities.CenterOwnerUser", b =>
                {
                    b.HasOne("Qurrah.Entities.Center", "Center")
                        .WithMany()
                        .HasForeignKey("FKCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.Gender", "Gender")
                        .WithMany("CenterOwnerUsers")
                        .HasForeignKey("FKGenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("FKUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Center");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Qurrah.Entities.FAQ", b =>
                {
                    b.HasOne("Qurrah.Entities.FAQType", "FAQType")
                        .WithMany("FAQs")
                        .HasForeignKey("FKTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FAQType");
                });

            modelBuilder.Entity("Qurrah.Entities.GenderDescription", b =>
                {
                    b.HasOne("Qurrah.Entities.Gender", "Gender")
                        .WithMany("GenderDescriptions")
                        .HasForeignKey("FKGenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.Language", "Language")
                        .WithMany("GenderDescriptions")
                        .HasForeignKey("FKLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Qurrah.Entities.LanguageDescription", b =>
                {
                    b.HasOne("Qurrah.Entities.Language", "InLanguage")
                        .WithMany()
                        .HasForeignKey("FKInLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.Language", "Language")
                        .WithMany("LanguageDescriptions")
                        .HasForeignKey("FKLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InLanguage");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Qurrah.Entities.LocalizedProperty", b =>
                {
                    b.HasOne("Qurrah.Entities.Language", "Language")
                        .WithMany("LocalizedProperties")
                        .HasForeignKey("FKLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Qurrah.Entities.ParentUser", b =>
                {
                    b.HasOne("Qurrah.Entities.Gender", "Gender")
                        .WithMany("ParentUsers")
                        .HasForeignKey("FKGenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qurrah.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("FKUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Qurrah.Entities.FAQType", b =>
                {
                    b.Navigation("FAQs");
                });

            modelBuilder.Entity("Qurrah.Entities.Gender", b =>
                {
                    b.Navigation("CenterOwnerUsers");

                    b.Navigation("GenderDescriptions");

                    b.Navigation("ParentUsers");
                });

            modelBuilder.Entity("Qurrah.Entities.Language", b =>
                {
                    b.Navigation("GenderDescriptions");

                    b.Navigation("LanguageDescriptions");

                    b.Navigation("LocalizedProperties");
                });

            modelBuilder.Entity("Qurrah.Entities.UserType", b =>
                {
                    b.Navigation("ApplicationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
